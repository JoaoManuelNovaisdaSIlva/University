-- usar a limitejogo e jogoterminou antes?
animaJogo :: Jogo -> Jogada -> Jogo
animaJogo jogo Parado = animaJogoParado jogo (procuraTerrenoJogador jogo 0)
animaJogo jogo (Move Cima) = animaJogoMoveCima jogo (procuraTerrenoJogador jogo 0)
animaJogoParado (Move Baixo) = 

-- procurar em q linha o jogador está e devolver o terreno
-- ver se um carro passa por cima dele
-- MUDAR JOGOTERMINOU THEN PARA MOVER DA MESMA

devolvePosicoesObjetivo :: Jogo -> Int -> [Int]
devolvePosicoesObjetivo (Jogo (Jogador (x,y)) (Mapa l ((terr, obs):t))) acc = if y == acc then devolvePosicoesObjetivo_aux (Jogo (Jogador (x,y)) (Mapa l ((terr, obs):t))) else devolvePosicoesObjetivo (Jogo (Jogador (x,y)) (Mapa l t)) (acc+1)

devolvePosicoesObjetivo_aux :: Jogo -> [Int]
devolvePosicoesObjetivo_aux (Jogo (Jogador (x,y)) (Mapa l ((Estrada v, obs):t))) = posicoesObjetivo obs v (length obs) 0



-- True significa q foi atropelado
atropelado :: Jogo -> [Int] -> [Int] -> Bool
atropelado _ [] _ = False
atropelado _ _ [] = False
atropelado (Jogo (Jogador (x,y)) (Mapa l ((terr, obs):t))) (h1:t1) (h2:t2) = if x >= h1 && x <= h2 then True else atropelado (Jogo (Jogador (x,y)) (Mapa l ((terr, obs):t))) t1 t2

posicoesCarrosOriginal :: Jogo -> [Int] -> [Int]
posicoesCarrosOriginal _ [] = []
posicoesCarrosOriginal (Jogo (Jogador (x,y)) (Mapa l ((Estrada v, obs):t))) (h:t1)
    | v < 0 = (h - (length(obs) - (mod (abs v) (length obs)))) : posicoesCarrosOriginal (Jogo (Jogador (x,y)) (Mapa l ((Estrada v, obs):t))) t1
    | v > 0 = (h-v) : posicoesCarrosOriginal (Jogo (Jogador (x,y)) (Mapa l ((Estrada v, obs):t))) t1
    | otherwise = h : posicoesCarrosOriginal (Jogo (Jogador (x,y)) (Mapa l ((Estrada v, obs):t))) t1

-- o q acontece quando o jogador fica parado numa estrada?
-- o q é suposto dar se o jogador fizer uma jogada para perder
animaJogoMoveCima :: Jogo -> Terreno -> Jogo
animaJogoMoveCima (Jogo (Jogador (x,y)) (Mapa l ((terr,obs):t))) (Rio x) = if jogadorBloquiadoArvore (Jogo (Jogador (x,y)) (Mapa l ((terr,obs):t))) (Move Cima) == True && encontraCelulaY (Mapa l ((terr,obs):t) (x,y) 0 == Tronco 
    then jogadorParadoEmTronco (Jogo (Jogador (x,y)) (Mapa l ((terr,obs):t))) 
    else if encontraCelulaY (Mapa l ((terr,obs):t) (x,y) 0 /= Tronco 
            then (Jogo (Jogador (x,y)) (Mapa l ((terr,obs):t))) 
            else moverObstaculos (moveJogador (Jogo (Jogador (x,y)) (Mapa l ((terr,obs):t))) (Move Cima))

animaJogoMoveCima jogo (Estrada x) = if jogadorBloquiadoArvore jogo (Move Cima) == True then moverObstaculos jogo else moverObstaculos (moveJogador jogo (Move Cima))
animaJogoMoveCima jogo (Relva) = if jogadorBloquiadoArvore jogo (Move Cima) == True then moverObstaculos jogo else moverObstaculos (moveJogador jogo (Move Cima))

